import{_ as i,c as e,o as l,ag as t}from"./chunks/framework.YPSzFf6x.js";const p=JSON.parse('{"title":"自动部署配置说明","description":"","frontmatter":{},"headers":[],"relativePath":"DEPLOYMENT.md","filePath":"DEPLOYMENT.md","lastUpdated":1749039486000}'),s={name:"DEPLOYMENT.md"};function o(h,a,r,n,d,c){return l(),e("div",null,a[0]||(a[0]=[t(`<h1 id="自动部署配置说明" tabindex="-1">自动部署配置说明 <a class="header-anchor" href="#自动部署配置说明" aria-label="Permalink to &quot;自动部署配置说明&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>本项目已配置GitHub Actions自动部署，当您推送代码到main或master分支时，会自动构建VitePress文档并部署到GitHub Pages。</p><h2 id="配置步骤" tabindex="-1">配置步骤 <a class="header-anchor" href="#配置步骤" aria-label="Permalink to &quot;配置步骤&quot;">​</a></h2><h3 id="_1-启用github-pages" tabindex="-1">1. 启用GitHub Pages <a class="header-anchor" href="#_1-启用github-pages" aria-label="Permalink to &quot;1. 启用GitHub Pages&quot;">​</a></h3><ol><li>前往您的GitHub仓库设置页面</li><li>找到&quot;Pages&quot;部分</li><li>在&quot;Source&quot;下拉菜单中选择&quot;GitHub Actions&quot;</li><li>保存设置</li></ol><h3 id="_2-确保分支名称正确" tabindex="-1">2. 确保分支名称正确 <a class="header-anchor" href="#_2-确保分支名称正确" aria-label="Permalink to &quot;2. 确保分支名称正确&quot;">​</a></h3><p>工作流配置会在以下分支上触发：</p><ul><li><code>main</code></li><li><code>master</code></li></ul><p>如果您的默认分支名称不同，请修改<code>.github/workflows/deploy.yml</code>文件中的分支名称。</p><h3 id="_3-推送代码" tabindex="-1">3. 推送代码 <a class="header-anchor" href="#_3-推送代码" aria-label="Permalink to &quot;3. 推送代码&quot;">​</a></h3><p>配置完成后，只需要推送代码到对应分支：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;更新文档&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre></div><h3 id="_4-查看部署状态" tabindex="-1">4. 查看部署状态 <a class="header-anchor" href="#_4-查看部署状态" aria-label="Permalink to &quot;4. 查看部署状态&quot;">​</a></h3><ul><li>在GitHub仓库的&quot;Actions&quot;标签页可以查看部署进度</li><li>部署完成后，您的文档将在<code>https://[用户名].github.io/[仓库名]</code>访问</li></ul><h2 id="工作流说明" tabindex="-1">工作流说明 <a class="header-anchor" href="#工作流说明" aria-label="Permalink to &quot;工作流说明&quot;">​</a></h2><h3 id="触发条件" tabindex="-1">触发条件 <a class="header-anchor" href="#触发条件" aria-label="Permalink to &quot;触发条件&quot;">​</a></h3><ul><li>推送到main或master分支</li><li>手动触发（workflow_dispatch）</li></ul><h3 id="构建过程" tabindex="-1">构建过程 <a class="header-anchor" href="#构建过程" aria-label="Permalink to &quot;构建过程&quot;">​</a></h3><ol><li>检出代码</li><li>设置Node.js环境</li><li>安装依赖</li><li>构建VitePress文档</li><li>部署到GitHub Pages</li></ol><h3 id="自定义域名-可选" tabindex="-1">自定义域名（可选） <a class="header-anchor" href="#自定义域名-可选" aria-label="Permalink to &quot;自定义域名（可选）&quot;">​</a></h3><p>如果您有自定义域名，可以：</p><ol><li>在<code>public</code>目录下创建<code>CNAME</code>文件</li><li>文件内容为您的域名，如：<code>docs.example.com</code></li><li>在域名DNS设置中添加CNAME记录指向<code>[用户名].github.io</code></li></ol><h2 id="故障排除" tabindex="-1">故障排除 <a class="header-anchor" href="#故障排除" aria-label="Permalink to &quot;故障排除&quot;">​</a></h2><h3 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h3><ol><li><strong>部署失败</strong>: 检查Actions日志查看具体错误信息</li><li><strong>页面404</strong>: 确认GitHub Pages设置正确，并等待几分钟让更改生效</li><li><strong>构建错误</strong>: 确保本地可以正常运行<code>npm run build</code></li></ol><h3 id="检查清单" tabindex="-1">检查清单 <a class="header-anchor" href="#检查清单" aria-label="Permalink to &quot;检查清单&quot;">​</a></h3><ul><li>[ ] GitHub Pages设置为&quot;GitHub Actions&quot;</li><li>[ ] 分支名称正确</li><li>[ ] package.json中有正确的构建脚本</li><li>[ ] 本地构建正常</li></ul><p>需要帮助？请查看GitHub Actions运行日志或提交Issue。</p>`,29)]))}const k=i(s,[["render",o]]);export{p as __pageData,k as default};
